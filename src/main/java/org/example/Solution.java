package org.example;

import java.util.List;

/*
Места в кинотеатре расположены в один ряд. Чтобы сидеть максимально далеко от остальных зрителей в ряду, пришедший зритель выбирает место, где расстояние от него до ближайшего к нему зрителя будет наибольшим. Гарантируется, что в ряду всегда есть свободное место и уже сидит хотя бы один зритель. Напишите функцию, которая по заданному ряду мест (массиву из нулей и единиц) вернет расстояние от выбранного места до ближайшего зрителя.

// Input: [1, 0, 0, 0, 1]
// Output: 2

// Input: [1, 0, 1, 0, 1, 0, 0, 0, 1]
// Output: 2

// Input: [1, 0, 1, 0]
// Output: 1
p1:     ↓
    [1, 0, 0, 0, 0, 0, 1]
p2:                 ↑
     0  1  2  3  4  5

((3 - 1) + 2) / 2

Complexity:
time: O(n)
space: O(1)

*/
public class Solution {
    public int bestParkingSpot(List<Integer> spots) {
        int l = 0;
        int r = 0;
        int result = 0;
        while (l < spots.size()) {
            while (r + 1 < spots.size() && spots.get(r) == spots.get(r + 1)) {
                r += 1;
            }

            // обновляем ответ, только если в плавающем окне были нули
            if (spots.get(r) == 0) {
                if (l == 0 || r == spots.size() - 1) {
                    // Если 0 прижат к стенке слева или справа,
                    // то свободных мест будет r - l + 1, т. к. посадим в самый край
                    result = Math.max(result, r - l + 1);
                } else {
                    // окно располагается между 1-ами:
                    // поэтому находим число мест по формуле (r - l + 2) // 2
                    result = Math.max(result, (r - l + 2) / 2);
                }
            }

            l = r + 1;
            r = r + 1;
        }
        return result;
    }
}
